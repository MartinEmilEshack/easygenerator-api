// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.1
// source: users-auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** General messages */
export interface Empty {
}

/** Request messages */
export interface CreateUserDto {
  email: string;
  password: string;
}

export interface FindOneUserDto {
  id: string;
}

export interface UpdateUserDto {
  id: string;
  email?: string | undefined;
  password?: string | undefined;
}

export interface RemoveUserDto {
  id: string;
}

/** Response messages */
export interface UserDto {
  id: string;
  email: string;
}

export interface UsersDto {
  users: UserDto[];
}

export const AUTH_PACKAGE_NAME = "auth";

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<UserDto>;

  findAllUsers(request: Empty): Observable<UsersDto>;

  findOneUser(request: FindOneUserDto): Observable<UserDto>;

  updateUser(request: UpdateUserDto): Observable<UserDto>;

  removeUser(request: RemoveUserDto): Observable<UserDto>;
}

export interface UserServiceController {
  createUser(request: CreateUserDto): Promise<UserDto> | Observable<UserDto> | UserDto;

  findAllUsers(request: Empty): Promise<UsersDto> | Observable<UsersDto> | UsersDto;

  findOneUser(request: FindOneUserDto): Promise<UserDto> | Observable<UserDto> | UserDto;

  updateUser(request: UpdateUserDto): Promise<UserDto> | Observable<UserDto> | UserDto;

  removeUser(request: RemoveUserDto): Promise<UserDto> | Observable<UserDto> | UserDto;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findAllUsers", "findOneUser", "updateUser", "removeUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
