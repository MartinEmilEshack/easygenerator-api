// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.1
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth.easygen";

/** Request messages */
export interface LoginDto {
  email: string;
  password: string;
}

export interface LogoutDto {
  userId: string;
}

export interface AccessTokenDto {
  token: string;
}

export interface RefreshTokenDto {
  refreshToken: string;
}

export interface ForgotPasswordDto {
  email: string;
}

export interface ResetPasswordDto {
  resetToken: string;
  password: string;
}

/** Response messages */
export interface UserData {
  userId: string;
  email: string;
}

export interface JwtDto {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
  user: UserData | undefined;
}

export interface AccessTokenPayloadDto {
  userId: string;
  email: string;
  issuer: string;
  audience: string;
  issuedAt: number;
}

export interface ActionConfirmationDto {
  message: string;
}

export const AUTH_EASYGEN_PACKAGE_NAME = "auth.easygen";

export interface AuthServiceClient {
  login(request: LoginDto): Observable<JwtDto>;

  logout(request: LogoutDto): Observable<ActionConfirmationDto>;

  refresh(request: RefreshTokenDto): Observable<JwtDto>;

  getPayload(request: AccessTokenDto): Observable<AccessTokenPayloadDto>;

  forgotPassword(request: ForgotPasswordDto): Observable<ActionConfirmationDto>;

  resetPassword(request: ResetPasswordDto): Observable<ActionConfirmationDto>;
}

export interface AuthServiceController {
  login(request: LoginDto): Promise<JwtDto> | Observable<JwtDto> | JwtDto;

  logout(
    request: LogoutDto,
  ): Promise<ActionConfirmationDto> | Observable<ActionConfirmationDto> | ActionConfirmationDto;

  refresh(request: RefreshTokenDto): Promise<JwtDto> | Observable<JwtDto> | JwtDto;

  getPayload(
    request: AccessTokenDto,
  ): Promise<AccessTokenPayloadDto> | Observable<AccessTokenPayloadDto> | AccessTokenPayloadDto;

  forgotPassword(
    request: ForgotPasswordDto,
  ): Promise<ActionConfirmationDto> | Observable<ActionConfirmationDto> | ActionConfirmationDto;

  resetPassword(
    request: ResetPasswordDto,
  ): Promise<ActionConfirmationDto> | Observable<ActionConfirmationDto> | ActionConfirmationDto;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "logout", "refresh", "getPayload", "forgotPassword", "resetPassword"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
